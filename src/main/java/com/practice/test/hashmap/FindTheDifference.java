package com.practice.test.hashmap;

import java.util.Map;
import java.util.function.Function;

import static java.util.stream.Collectors.counting;
import static java.util.stream.Collectors.groupingBy;

// 389 Leetcode
/*You are given two strings s and t.
String t is generated by random shuffling string s and then add one more letter at a random position.
Return the letter that was added to t.

Example 1:

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:

Input: s = "", t = "y"
Output: "y"
Constraints:

0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lowercase English letters.*/

public class FindTheDifference {
    public static void main(String[] args) {
//        String s = "abcd", t = "abcde";
          String s = "a", t="aa";

        char diffChar = findTheDifference(s, t);
        System.out.println("diffChar===>"+diffChar);

    }

    public static char findTheDifference(String s, String t) {
        Map<Character, Long> sMap = s.chars().mapToObj(e -> (char) e).collect(groupingBy(Function.identity(), counting()));
        Map<Character, Long> tMap = t.chars().mapToObj(e -> (char) e).collect(groupingBy(Function.identity(), counting()));
        char cdiff = 't';
        for (char c : t.toCharArray()){
            if(!sMap.containsKey(c)){
                return c;
            }
            if(sMap.get(c)!=tMap.get(c)){
                return c;
            }
        }
        return cdiff;
    }
}
